// user-menu.js - VERS√ÉO ATUALIZADA COM NOVAS PERMISS√ïES E CARGOS

document.addEventListener('DOMContentLoaded', function() {
    class UserMenu {
        constructor() {
            this.userMenuBtn = document.getElementById('userMenuBtn');
            this.userDropdown = document.getElementById('userDropdown');
            this.userAvatar = document.getElementById('userAvatar');
            this.userName = document.querySelector('.user-name');
            this.userRole = document.querySelector('.user-role');
            this.logoutBtn = document.getElementById('logoutBtn');
            
            // Novos elementos
            this.updatesBtn = document.querySelector('a[href="/updates.html"]');
            this.faqBtn = document.querySelector('a[href="/faq.html"]');
            this.maintenanceBtn = document.querySelector('a[href="/maintenance.html"]');
            
            this.init();
        }

        async init() {
            await this.loadUserInfo();
            this.setupEventListeners();
        }

        async loadUserInfo() {
            try {
                this.showLoadingState();
                
                const userData = await fetchUserProfile();
                
                if (userData) {
                    this.updateUI(userData);
                } else {
                    this.handleNoUserData();
                }
                
            } catch (error) {
                console.error('‚ùå Erro ao carregar informa√ß√µes do usu√°rio:', error);
                this.showErrorState();
            }
        }

        updateUI(userData) {
            if (this.userName) {
                this.userName.textContent = userData.full_name || userData.email || 'Usu√°rio';
            }

            if (this.userRole) {
                // ATUALIZADO: Mapeamento completo de cargos incluindo group_admin
                const roleMap = { 
                    'admin': 'Administrador', 
                    'group_admin': 'Subadministrador', 
                    'user': 'Usu√°rio' 
                };
                this.userRole.textContent = roleMap[userData.role] || 'Usu√°rio';
            }

            if (this.userAvatar) {
                const timestamp = `?t=${new Date().getTime()}`;
                if (userData.avatar_url) {
                    this.userAvatar.src = userData.avatar_url + timestamp;
                } else {
                    const name = userData.full_name || userData.email || 'U';
                    this.userAvatar.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&background=4f46e5&color=fff&bold=true`;
                }
            }
            
            // ATUALIZADO: Verificar permiss√µes espec√≠ficas para mostrar/ocultar itens do menu
            this.checkPermissions(userData);
            
            this.hideLoadingState();
        }

        // NOVO M√âTODO: Verificar permiss√µes do usu√°rio
        checkPermissions(userData) {
            // Se for admin ou group_admin, mostrar op√ß√µes administrativas no menu lateral
            // (isso √© tratado no menu.js, mas podemos adicionar l√≥gica aqui se necess√°rio)
            
            // Exemplo: Se quisermos esconder algumas op√ß√µes do dropdown baseado em permiss√µes
            // Por enquanto, todas as op√ß√µes do dropdown s√£o vis√≠veis para todos os usu√°rios logados
            console.log(`üë§ Usu√°rio ${userData.email} com role: ${userData.role}`);
            
            // Log adicional para debugging de permiss√µes
            if (userData.allowed_pages && userData.allowed_pages.length > 0) {
                console.log(`üìã P√°ginas permitidas: ${userData.allowed_pages.join(', ')}`);
            }
        }

        setupEventListeners() {
            // Event listener existente para abrir/fechar menu
            if (this.userMenuBtn) {
                this.userMenuBtn.addEventListener('click', () => this.userDropdown.classList.toggle('active'));
                document.addEventListener('click', (e) => {
                    if (!this.userMenuBtn.contains(e.target)) this.userDropdown.classList.remove('active');
                });
            }

            // Event listener existente para logout
            if (this.logoutBtn) {
                this.logoutBtn.addEventListener('click', async (e) => {
                    e.preventDefault();
                    if (confirm('Tem certeza que deseja sair?')) await signOut();
                });
            }

            // NOVOS EVENT LISTENERS PARA AS OP√á√ïES ADICIONAIS
            if (this.updatesBtn) {
                this.updatesBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    this.userDropdown.classList.remove('active');
                    this.navigateToUpdates();
                });
            }

            if (this.faqBtn) {
                this.faqBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    this.userDropdown.classList.remove('active');
                    this.navigateToFAQ();
                });
            }

            if (this.maintenanceBtn) {
                this.maintenanceBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    this.userDropdown.classList.remove('active');
                    this.navigateToMaintenance();
                });
            }

            // ==================================================================
            // --- OUVE O EVENTO DE ATUALIZA√á√ÉO DE PERFIL ---
            console.log('üëÇ Configurando ouvinte para o evento [profileUpdated].');
            window.addEventListener('profileUpdated', () => {
                console.log('üéâ Evento [profileUpdated] recebido! Recarregando informa√ß√µes do menu.');
                this.loadUserInfo(); 
            });

            // NOVO: Ouvinte para evento de mudan√ßa de permiss√µes
            window.addEventListener('permissionsUpdated', () => {
                console.log('üîÑ Evento [permissionsUpdated] recebido! Recarregando informa√ß√µes do menu.');
                this.loadUserInfo();
            });
        }

        // NOVOS M√âTODOS PARA NAVEGA√á√ÉO
        navigateToUpdates() {
            console.log('Navegando para p√°gina de atualiza√ß√µes');
            window.location.href = '/updates.html';
        }

        navigateToFAQ() {
            console.log('Navegando para p√°gina de FAQ');
            window.location.href = '/faq.html';
        }

        navigateToMaintenance() {
            console.log('Navegando para p√°gina de manuten√ß√£o');
            window.location.href = '/maintenance.html';
        }

        showLoadingState() {
            if (this.userName) this.userName.textContent = 'Carregando...';
            if (this.userRole) this.userRole.textContent = '...';
        }

        hideLoadingState() {
            // A UI √© atualizada diretamente, n√£o h√° estado de "loading" para remover.
        }

        showErrorState() {
            if (this.userName) this.userName.textContent = 'Erro';
            if (this.userRole) this.userRole.textContent = '---';
        }

        handleNoUserData() {
            // Se n√£o houver dados, o routeGuard no auth.js j√° deve ter redirecionado para o login.
            console.log('Nenhum dado de usu√°rio, redirecionamento para login deve ocorrer.');
        }
    }

    if (document.getElementById('userMenuBtn')) {
        new UserMenu();
    }
});
