// auth.js - VERS√ÉO FINAL

const SUPABASE_URL = 'https://zhaetrzpkkgzfrwxfqdw.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpoYWV0cnpwa2tnemZyd3hmcWR3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0MjM3MzksImV4cCI6MjA3Mjk5OTczOX0.UHoWWZahvp_lMDH8pK539YIAFTAUnQk9mBX5tdixwN0';

const supabase = self.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY );
let currentUserProfile = null; // Vari√°vel de cache em mem√≥ria

/**
 * Fun√ß√£o centralizada para requisi√ß√µes autenticadas.
 */
async function authenticatedFetch(url, options = {}) {
    const session = await getSession();

    if (!session) {
        alert("Sua sess√£o expirou ou √© inv√°lida. Por favor, fa√ßa login novamente.");
        window.location.href = '/login.html';
        throw new Error("Sess√£o n√£o encontrada.");
    }

    const defaultHeaders = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`
    };

    const finalOptions = { ...options, headers: { ...defaultHeaders, ...options.headers } };
    return fetch(url, finalOptions);
}

/**
 * Busca o usu√°rio autenticado no Supabase.
 */
async function getAuthUser() {
    const { data: { user } } = await supabase.auth.getUser();
    return user;
}

/**
 * Busca o perfil do usu√°rio. Usa um cache em mem√≥ria para evitar requisi√ß√µes repetidas.
 */
async function fetchUserProfile() {
    // Se j√° temos o perfil em cache, retorna ele imediatamente.
    if (currentUserProfile) {
        console.log('üë§ Usando perfil do cache em mem√≥ria (auth.js)');
        return currentUserProfile;
    }
    
    const session = await getSession();
    if (!session) return null;

    try {
        console.log('üåê Buscando perfil do servidor (/api/users/me)');
        const response = await authenticatedFetch('/api/users/me');
        if (!response.ok) {
            if (response.status === 401 || response.status === 404) {
                await signOut();
                return null;
            }
            throw new Error('Falha ao buscar perfil do usu√°rio.');
        }
        // Salva o perfil no cache em mem√≥ria para futuras chamadas
        currentUserProfile = await response.json();
        return currentUserProfile;
    } catch (error) {
        console.error("Erro em fetchUserProfile:", error);
        return null;
    }
}

/**
 * Obt√©m a sess√£o atual do Supabase.
 */
async function getSession() {
    const { data: { session } } = await supabase.auth.getSession();
    return session;
}

/**
 * Realiza o logout do usu√°rio.
 */
async function signOut() {
    await supabase.auth.signOut();
    clearUserProfileCache(); // Limpa o cache ao sair
    localStorage.removeItem('currentUser');
    window.location.href = '/login.html';
}

/**
 * Protege rotas que exigem login e permiss√µes espec√≠ficas.
 */
async function routeGuard(requiredPermission = null) {
    const user = await getAuthUser();
    if (!user) {
        window.location.href = `/login.html?redirect=${window.location.pathname}`;
        return;
    }
    if (requiredPermission) {
        const profile = await fetchUserProfile();
        if (!profile || (profile.role !== 'admin' && (!profile.allowed_pages || !profile.allowed_pages.includes(requiredPermission)))) {
            alert('Voc√™ n√£o tem permiss√£o para acessar esta p√°gina.');
            window.location.href = '/search.html';
        }
    }
}

// ==================================================================
// --- FUN√á√ÉO ADICIONADA PARA LIMPEZA DE CACHE ---
/**
 * Limpa a vari√°vel de cache do perfil do usu√°rio (currentUserProfile).
 * Isso for√ßa a pr√≥xima chamada a fetchUserProfile a buscar dados frescos do servidor.
 */
function clearUserProfileCache() {
    console.log('üßπ Cache de perfil em mem√≥ria (auth.js) limpo.');
    currentUserProfile = null;
}
// ==================================================================

// A fun√ß√£o updateUIVisibility foi removida pois sua l√≥gica agora est√° centralizada no user-menu.js
