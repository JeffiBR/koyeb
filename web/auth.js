// auth.js - VERS√ÉO FINAL

const SUPABASE_URL = 'https://zhaetrzpkkgzfrwxfqdw.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpoYWV0cnpwa2tnemZyd3hmcWR3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0MjM3MzksImV4cCI6MjA3Mjk5OTczOX0.UHoWWZahvp_lMDH8pK539YIAFTAUnQk9mBX5tdixwN0';

const supabase = self.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
let currentUserProfile = null; // Vari√°vel de cache em mem√≥ria

/**
 * Fun√ß√£o centralizada para requisi√ß√µes autenticadas.
 */
async function authenticatedFetch(url, options = {}) {
    const session = await getSession();

    if (!session) {
        alert("Sua sess√£o expirou ou √© inv√°lida. Por favor, fa√ßa login novamente.");
        window.location.href = '/login.html';
        throw new Error("Sess√£o n√£o encontrada.");
    }

    const defaultHeaders = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`
    };

    const finalOptions = { ...options, headers: { ...defaultHeaders, ...options.headers } };
    return fetch(url, finalOptions);
}

/**
 * Busca o usu√°rio autenticado no Supabase.
 */
async function getAuthUser() {
    const { data: { user } } = await supabase.auth.getUser();
    return user;
}

/**
 * Busca o perfil do usu√°rio. Usa um cache em mem√≥ria para evitar requisi√ß√µes repetidas.
 */
async function fetchUserProfile() {
    // Se j√° temos o perfil em cache, retorna ele imediatamente.
    if (currentUserProfile) {
        console.log('üë§ Usando perfil do cache em mem√≥ria (auth.js)');
        return currentUserProfile;
    }
    
    const session = await getSession();
    if (!session) return null;

    try {
        console.log('üåê Buscando perfil do servidor (/api/users/me)');
        const response = await authenticatedFetch('/api/users/me');
        if (!response.ok) {
            if (response.status === 401 || response.status === 404) {
                await signOut();
                return null;
            }
            throw new Error('Falha ao buscar perfil do usu√°rio.');
        }
        // Salva o perfil no cache em mem√≥ria para futuras chamadas
        currentUserProfile = await response.json();
        return currentUserProfile;
    } catch (error) {
        console.error("Erro em fetchUserProfile:", error);
        return null;
    }
}

/**
 * Obt√©m a sess√£o atual do Supabase.
 */
async function getSession() {
    const { data: { session } } = await supabase.auth.getSession();
    return session;
}

/**
 * Realiza o logout do usu√°rio.
 */
async function signOut() {
    await supabase.auth.signOut();
    clearUserProfileCache(); // Limpa o cache ao sair
    localStorage.removeItem('currentUser');
    window.location.href = '/login.html';
}

/**
 * Protege rotas que exigem login e permiss√µes espec√≠ficas.
 */
async function routeGuard(requiredPermission = null) {
    const user = await getAuthUser();
    if (!user) {
        window.location.href = `/login.html?redirect=${window.location.pathname}`;
        return;
    }
    if (requiredPermission) {
        const profile = await fetchUserProfile();
        if (!profile || (profile.role !== 'admin' && (!profile.allowed_pages || !profile.allowed_pages.includes(requiredPermission)))) {
            alert('Voc√™ n√£o tem permiss√£o para acessar esta p√°gina.');
            window.location.href = '/search.html';
        }
    }
}

/**
 * Fun√ß√£o para verificar autentica√ß√£o - necess√°ria para a p√°gina da cesta b√°sica
 */
async function checkAuth() {
    const token = localStorage.getItem('token');
    if (!token) {
        return false;
    }

    try {
        const response = await fetch('/api/users/me', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        return response.ok;
    } catch (error) {
        console.error('Erro ao verificar autentica√ß√£o:', error);
        return false;
    }
}

/**
 * Limpa a vari√°vel de cache do perfil do usu√°rio (currentUserProfile).
 * Isso for√ßa a pr√≥xima chamada a fetchUserProfile a buscar dados frescos do servidor.
 */
function clearUserProfileCache() {
    console.log('üßπ Cache de perfil em mem√≥ria (auth.js) limpo.');
    currentUserProfile = null;
}

/**
 * Verifica se o usu√°rio est√° autenticado e redireciona se necess√°rio
 */
async function requireAuth(redirectUrl = '/login.html') {
    const user = await getAuthUser();
    if (!user) {
        window.location.href = redirectUrl;
        return false;
    }
    return true;
}

/**
 * Obt√©m o token de autentica√ß√£o atual
 */
async function getAuthToken() {
    const session = await getSession();
    return session?.access_token || null;
}

/**
 * Verifica se o usu√°rio tem uma permiss√£o espec√≠fica
 */
async function hasPermission(permission) {
    const profile = await fetchUserProfile();
    if (!profile) return false;
    
    if (profile.role === 'admin') return true;
    
    return profile.allowed_pages && profile.allowed_pages.includes(permission);
}

/**
 * Inicializa a autentica√ß√£o e verifica o estado do usu√°rio
 */
async function initAuth() {
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
        if (event === 'SIGNED_IN') {
            console.log('Usu√°rio fez login');
            clearUserProfileCache(); // Limpa cache para buscar dados atualizados
        } else if (event === 'SIGNED_OUT') {
            console.log('Usu√°rio fez logout');
            clearUserProfileCache();
            currentUserProfile = null;
        } else if (event === 'TOKEN_REFRESHED') {
            console.log('Token atualizado');
        }
    });

    return subscription;
}

/**
 * Fun√ß√£o auxiliar para fazer login com email e senha
 */
async function signIn(email, password) {
    const { data, error } = await supabase.auth.signInWithPassword({
        email: email,
        password: password
    });

    if (error) {
        throw error;
    }

    // Salva o token no localStorage para compatibilidade
    if (data.session) {
        localStorage.setItem('token', data.session.access_token);
    }

    clearUserProfileCache(); // Limpa cache para buscar dados atualizados
    return data;
}

/**
 * Fun√ß√£o auxiliar para cadastrar novo usu√°rio
 */
async function signUp(email, password, userMetadata = {}) {
    const { data, error } = await supabase.auth.signUp({
        email: email,
        password: password,
        options: {
            data: userMetadata
        }
    });

    if (error) {
        throw error;
    }

    return data;
}

// Inicializa a autentica√ß√£o quando o script √© carregado
document.addEventListener('DOMContentLoaded', function() {
    initAuth().catch(console.error);
});

// Exporta fun√ß√µes para uso global (se necess√°rio)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        authenticatedFetch,
        getAuthUser,
        fetchUserProfile,
        getSession,
        signOut,
        routeGuard,
        checkAuth,
        clearUserProfileCache,
        requireAuth,
        getAuthToken,
        hasPermission,
        initAuth,
        signIn,
        signUp
    };
}
